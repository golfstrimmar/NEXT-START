generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Message {
  id                  Int                 @id @default(autoincrement())
  text                String
  author              String
  authorID            Int
  createdAt           DateTime            @default(now())
  UserMessageReaction UserMessageReaction[]
  comments            Comment[]           @relation
  commentReactions    CommentReaction[]   @relation
  @@index([authorID, createdAt])
}

model User {
  id                         Int                    @id @default(autoincrement())
  userName                   String                 @unique
  email                      String                 @unique
  password                   String?
  googleId                   String?                @unique
  avatarUrl                  String?
  createdAt                  DateTime               @default(now())
  UserMessageReaction        UserMessageReaction[]
  comments                   Comment[]              @relation
  commentReactions           CommentReaction[]      @relation
  sentPrivateMessages        PrivateMessage[]       @relation("Sender")
  receivedPrivateMessages    PrivateMessage[]       @relation("Receiver")
  privateChatsAsParticipant1 PrivateChat[]          @relation("Participant1")
  privateChatsAsParticipant2 PrivateChat[]          @relation("Participant2")
  onlineUser                 OnlineUser?            @relation("UserToOnlineUser")
  @@index([email, userName])
}

model UserMessageReaction {
  id                  Int                 @id @default(autoincrement())
  userId              Int
  userName            String
  messageId           Int
  reaction            String
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  message             Message             @relation(fields: [messageId], references: [id], onDelete: Cascade)
  @@unique([userId, messageId])
  @@index([userId, messageId])
}

model Comment {
  id                  Int                 @id @default(autoincrement())
  text                String
  userId              Int
  userName            String
  messageId           Int
  createdAt           DateTime            @default(now())
  likes               Int                 @default(0)
  dislikes            Int                 @default(0)
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  message             Message             @relation(fields: [messageId], references: [id], onDelete: Cascade)
  commentReactions    CommentReaction[]   @relation
  @@index([userId, messageId, createdAt])
}

model CommentReaction {
  id                  Int                 @id @default(autoincrement())
  userId              Int
  userName            String
  commentId           Int
  messageId           Int
  reaction            String
  createdAt           DateTime            @default(now())
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment             Comment             @relation(fields: [commentId], references: [id], onDelete: Cascade)
  message             Message             @relation(fields: [messageId], references: [id], onDelete: Cascade)
  @@unique([userId, commentId])
  @@index([userId, commentId])
}

model PrivateChat {
  id                  Int                 @id @default(autoincrement())
  createdAt           DateTime            @default(now())
  participant1Id      Int
  participant2Id      Int
  participant1        User                @relation("Participant1", fields: [participant1Id], references: [id], onDelete: Cascade)
  participant2        User                @relation("Participant2", fields: [participant2Id], references: [id], onDelete: Cascade)
  messages            PrivateMessage[]    @relation("Chat")
  @@unique([participant1Id, participant2Id])
  @@index([participant1Id, participant2Id])
}

model PrivateMessage {
  id                  Int                 @id @default(autoincrement())
  chatId              Int
  senderId            Int
  receiverId          Int
  text                String              @db.Text
  createdAt           DateTime            @default(now())
  chat                PrivateChat         @relation("Chat", fields: [chatId], references: [id], onDelete: Cascade)
  sender              User                @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver            User                @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  @@index([chatId, createdAt])
}

model OnlineUser {
  userId     Int      @id
  socketId   String   @unique
  lastActive DateTime @default(now())
  user       User     @relation("UserToOnlineUser", fields: [userId], references: [id], onDelete: Cascade)
}